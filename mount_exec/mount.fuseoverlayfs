#! /usr/bin/env python3

import os
import sys
import subprocess
import time

from os import listdir
from urllib.parse import urlparse

# mount -t fuseoverlayfs /opt/mount
#[0] /sbin/mount.fuseoverlayfs
#[1] /opt/mount

def which(program):
    pathenv = os.getenv('PATH')
    if not pathenv:
        pathenv = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    for p in pathenv.split(os.path.pathsep):
        binpath = os.path.join(p, program)
        if os.path.exists(binpath) and os.access(binpath, os.X_OK):
            return binpath
    return None

def reorderArgs(argv):
    command = ""
    options = []
    positionalArgs = []
    skipCount = 0
    mountTimeout = 60
    for idx, arg in enumerate(argv):
        if idx == 0:
            command = arg
            continue

        if skipCount > 0:
            skipCount -= 1
            continue

        if arg == "-o":
            # option
            options.append("-o")
            options.append(argv[idx+1])
            skipCount = 1
        else:
            positionalArgs.append(arg)

    reorderedArgs = []
    reorderedArgs.append(command)
    reorderedArgs.extend(options)

    if len(positionalArgs) > 1:
        if positionalArgs[0] == "fuseoverlayfs" or positionalArgs[0] == "fuse-overlayfs":
            # device type
            positionalArgs = positionalArgs[1:]

    reorderedArgs.extend(positionalArgs)

    return reorderedArgs, mountTimeout

def run_command(command_argv):
    pathenv = os.getenv('PATH')
    if not pathenv:
        pathenv = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        vars_dict = {}
        vars_dict["PATH"] = pathenv
        os.environ.update(vars_dict)

    # returns exit code
    return os.spawnvpe(os.P_WAIT, command_argv[0], command_argv, os.environ)

def main(argv):
    fsBin = which("fuse-overlayfs")

    if not fsBin:
        print("failed to find fuse-overlayfs installed from PATH environment", file=sys.stderr)
        sys.exit(1)

    print("found fuse-overlayfs > %s" % fsBin)

    reorderedArgv, mountTimeout = reorderArgs(argv)

    if len(reorderedArgv) <= 2:
        print("not enough number of arguments given", file=sys.stderr)
        sys.exit(1)

    command = "%s %s" % (fsBin, " ".join(reorderedArgv[1:]))
    print("executing > %s" % command)
    exitcode = run_command(command.split())
    if exitcode > 0:
        print("failed to mount (fuse-overlayfs exited with exitcode %d)" % exitcode, file=sys.stderr)
        sys.exit(exitcode)
    elif exitcode < 0:
        print("failed to mount (fuse-overlayfs exited with SIG %d)" % exitcode, file=sys.stderr)
        sys.exit(1)

    sys.exit(0)


if __name__ == "__main__":
    main(sys.argv)
